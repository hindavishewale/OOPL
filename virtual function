#include <iostream>
#include <iomanip>
using namespace std;

class Student {
public:
    string name;
    int rollNumber;
    string subject;

    void input() {
        cout << "Enter Student Name: ";
        cin.ignore();  // To handle any leftover newline characters
        getline(cin, name);
        cout << "Enter Roll Number: ";
        cin >> rollNumber;
        cout << "Enter Subject: ";
        cin.ignore();  // To handle any leftover newline characters
        getline(cin, subject);
    }

    void display() const {
        cout << setw(15) << name << setw(10) << rollNumber << setw(15) << subject;
    }
};

class StudentDetails : public Student {
public:
    string subjectCode;
    float internalAssessment;
    float universityExamMarks;

    void input() {
        Student::input();
        cout << "Enter Subject Code: ";
        cin >> subjectCode;
        cout << "Enter Internal Assessment Marks: ";
        cin >> internalAssessment;
        cout << "Enter University Examination Marks: ";
        cin >> universityExamMarks;
    }

    void display() const {
        Student::display();
        cout << setw(15) << subjectCode
             << setw(10) << internalAssessment
             << setw(10) << universityExamMarks << endl;
    }

    void edit() {
        cout << "Edit details for Roll Number " << rollNumber << ":" << endl;
        input();
    }
};

class MasterTable {
private:
    StudentDetails* records[50];  // Array of pointers to store up to 50 student records
    int recordCount = 0;

public:
    void buildMasterTable() {
        int n;
        cout << "Enter number of students: ";
        cin >> n;

        for (int i = 0; i < n; ++i) {
            records[recordCount] = new StudentDetails();
            cout << "\nEnter details for student " << (recordCount + 1) << ":" << endl;
            records[recordCount]->input();
            recordCount++;
        }
    }

    void listTable() const {
        if (recordCount == 0) {
            cout << "No records available." << endl;
            return;
        }

        cout << setw(15) << "Name" << setw(10) << "Roll No"
             << setw(15) << "Subject" << setw(15) << "Subject Code"
             << setw(10) << "IA Marks" << setw(10) << "UE Marks" << endl;
        cout << string(75, '-') << endl;

        for (int i = 0; i < recordCount; ++i) {
            records[i]->display();
        }
    }

    void insertEntry() {
        records[recordCount] = new StudentDetails();
        cout << "\nEnter details for new student:" << endl;
        records[recordCount]->input();
        recordCount++;
    }

    void deleteEntry() {
        int rollNumber;
        cout << "Enter Roll Number to delete: ";
        cin >> rollNumber;

        for (int i = 0; i < recordCount; ++i) {
            if (records[i]->rollNumber == rollNumber) {
                delete records[i];  // Delete the student record
                for (int j = i; j < recordCount - 1; ++j) {
                    records[j] = records[j + 1];  // Shift remaining records
                }
                recordCount--;
                cout << "Record deleted successfully!" << endl;
                return;
            }
        }
        cout << "Record not found!" << endl;
    }

    void editEntry() {
        int rollNumber;
        cout << "Enter Roll Number to edit: ";
        cin >> rollNumber;

        for (int i = 0; i < recordCount; ++i) {
            if (records[i]->rollNumber == rollNumber) {
                records[i]->edit();
                cout << "Record updated successfully!" << endl;
                return;
            }
        }
        cout << "Record not found!" << endl;
    }

    void searchRecord() const {
        int rollNumber;
        cout << "Enter Roll Number to search: ";
        cin >> rollNumber;

        for (int i = 0; i < recordCount; ++i) {
            if (records[i]->rollNumber == rollNumber) {
                cout << "\nRecord found:\n";
                cout << setw(15) << "Name" << setw(10) << "Roll No"
                     << setw(15) << "Subject" << setw(15) << "Subject Code"
                     << setw(10) << "IA Marks" << setw(10) << "UE Marks" << endl;
                cout << string(75, '-') << endl;
                records[i]->display();
                return;
            }
        }
        cout << "Record not found!" << endl;
    }

    ~MasterTable() {
        for (int i = 0; i < recordCount; ++i) {
            delete records[i];
        }
    }
};

int main() {
    MasterTable table;
    int choice;

    do {
        cout << "\n--- Student Records Management ---\n";
        cout << "1. Build Master Table\n";
        cout << "2. List Table\n";
        cout << "3. Insert New Entry\n";
        cout << "4. Delete Old Entry\n";
        cout << "5. Edit an Entry\n";
        cout << "6. Search for a Record\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                table.buildMasterTable();
                break;
            case 2:
                table.listTable();
                break;
            case 3:
                table.insertEntry();
                break;
            case 4:
                table.deleteEntry();
                break;
            case 5:
                table.editEntry();
                break;
            case 6:
                table.searchRecord();
                break;
            case 7:
                cout << "Exiting program. Goodbye!" << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 7);

    return 0;
}
